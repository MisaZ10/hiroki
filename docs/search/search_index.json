{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hiroki build REST APIs faster than ever using the open source tools and standards you and your team already know. hiroki is an open source tool inspired by baucis . hiroki is fully compatible with mongoose 4 and 5. hiroki is written in ES6 standards. Getting Started To install: npm install --save hiroki Create simple rest api: ... const app = express(); const UsersSchema = new mongoose.Schema({name}); mongoose.model('Users', UsersSchema); hiroki.rest('Users');//enable GET,PUT,POST DELETE methods app.use('/api', hiroki.build()); app.listen(8012); Sponsors:","title":"Hiroki"},{"location":"#hiroki","text":"build REST APIs faster than ever using the open source tools and standards you and your team already know. hiroki is an open source tool inspired by baucis . hiroki is fully compatible with mongoose 4 and 5. hiroki is written in ES6 standards.","title":"Hiroki"},{"location":"#getting-started","text":"To install: npm install --save hiroki Create simple rest api: ... const app = express(); const UsersSchema = new mongoose.Schema({name}); mongoose.model('Users', UsersSchema); hiroki.rest('Users');//enable GET,PUT,POST DELETE methods app.use('/api', hiroki.build()); app.listen(8012);","title":"Getting Started"},{"location":"#sponsors","text":"","title":"Sponsors:"},{"location":"extending-hiroki/decorators/","text":"Extending Hiroki you can easly extend hiroji using a simple express middleware. Using decorators hiroki.rest return a Controller object. see details of controller methods here . Example ... const app = express(); const UsersSchema = new mongoose.Schema({name}); mongoose.model('Users', UsersSchema); const controller = hiroki.rest('Users'); controller.request('get', (req,res,next) = { req.query.limit = 3; //override query params limit next(); }) app.use('/api', hiroki.build()); app.listen(8012);","title":"Extending Hiroki"},{"location":"extending-hiroki/decorators/#extending-hiroki","text":"you can easly extend hiroji using a simple express middleware.","title":"Extending Hiroki"},{"location":"extending-hiroki/decorators/#using-decorators","text":"hiroki.rest return a Controller object. see details of controller methods here .","title":"Using decorators"},{"location":"extending-hiroki/decorators/#example","text":"... const app = express(); const UsersSchema = new mongoose.Schema({name}); mongoose.model('Users', UsersSchema); const controller = hiroki.rest('Users'); controller.request('get', (req,res,next) = { req.query.limit = 3; //override query params limit next(); }) app.use('/api', hiroki.build()); app.listen(8012);","title":"Example"},{"location":"extending-hiroki/overview/","text":"Controller Object hiroki.rest return a Controller object. this object build routes for a particular mongoose model. const controller = hiroki.rest(model); Structure Methods request: extend functionality using middlewares before hiroki native middlewares. build: build specific route. (hiroki.build run build for each controller) Statics methods Controller.getRouter: return the current express router. Set properties disabledMethods: String with disabled routes. Ej: disabledMethods = \"get post\"'' outgoing: format middleware before response. beforeEnd: after format route. Details Usage detail of use for some useful functions Request controler.request(methods, middleware) enable to add middleware before hiroki routes. methods(String): methods separated by spaces. get post put delete Example: ... const app = express(); const UsersSchema = new mongoose.Schema({name}); mongoose.model('Users', UsersSchema); const controller = hiroki.rest('Users'); controller.request('delete post put', (req,res,next) = { req.status(401).json({error:'unauthorized'}); }) app.use('/api', hiroki.build()); app.listen(8012); Disabled methods DisabledMethods alows you to disable some hiroki methods. request with this methods return 404 status. Example: ... const controller = hiroki.rest('Users'); controller.disabledMethods = 'delete put'; app.use('/api', hiroki.build()); app.listen(8012); Outgoing Outgoing allows you to add a formatting function before the output. The function receives each document and is executed once for each document. ... const controller = hiroki.rest('Users'); controller.outGoing = function(doc) { doc.outName = doc.name.toUpperCase() return doc }; app.use('/api', hiroki.build()); app.listen(8012); BeforeEnd beforeEnd allows you to add a middleware that is executed before returning the server response and after formatting all the documents within this function you can manipulate the object req.rest req.rest can contain up to 3 parameters: count, response (formatted documents) and status (http status) req.rest structure { count : Number , response : Docs , status : Number } beforeEnd usage controller.beforeEnd = function(req,res,next){ doSomething(); next(); //hiroki make the response }","title":"Controller Object"},{"location":"extending-hiroki/overview/#controller-object","text":"hiroki.rest return a Controller object. this object build routes for a particular mongoose model. const controller = hiroki.rest(model);","title":"Controller Object"},{"location":"extending-hiroki/overview/#structure","text":"","title":"Structure"},{"location":"extending-hiroki/overview/#methods","text":"request: extend functionality using middlewares before hiroki native middlewares. build: build specific route. (hiroki.build run build for each controller)","title":"Methods"},{"location":"extending-hiroki/overview/#statics-methods","text":"Controller.getRouter: return the current express router.","title":"Statics methods"},{"location":"extending-hiroki/overview/#set-properties","text":"disabledMethods: String with disabled routes. Ej: disabledMethods = \"get post\"'' outgoing: format middleware before response. beforeEnd: after format route.","title":"Set properties"},{"location":"extending-hiroki/overview/#details-usage","text":"detail of use for some useful functions","title":"Details Usage"},{"location":"extending-hiroki/overview/#request","text":"controler.request(methods, middleware) enable to add middleware before hiroki routes. methods(String): methods separated by spaces. get post put delete Example: ... const app = express(); const UsersSchema = new mongoose.Schema({name}); mongoose.model('Users', UsersSchema); const controller = hiroki.rest('Users'); controller.request('delete post put', (req,res,next) = { req.status(401).json({error:'unauthorized'}); }) app.use('/api', hiroki.build()); app.listen(8012);","title":"Request"},{"location":"extending-hiroki/overview/#disabled-methods","text":"DisabledMethods alows you to disable some hiroki methods. request with this methods return 404 status. Example: ... const controller = hiroki.rest('Users'); controller.disabledMethods = 'delete put'; app.use('/api', hiroki.build()); app.listen(8012);","title":"Disabled methods"},{"location":"extending-hiroki/overview/#outgoing","text":"Outgoing allows you to add a formatting function before the output. The function receives each document and is executed once for each document. ... const controller = hiroki.rest('Users'); controller.outGoing = function(doc) { doc.outName = doc.name.toUpperCase() return doc }; app.use('/api', hiroki.build()); app.listen(8012);","title":"Outgoing"},{"location":"extending-hiroki/overview/#beforeend","text":"beforeEnd allows you to add a middleware that is executed before returning the server response and after formatting all the documents within this function you can manipulate the object req.rest req.rest can contain up to 3 parameters: count, response (formatted documents) and status (http status)","title":"BeforeEnd"},{"location":"extending-hiroki/overview/#reqrest-structure","text":"{ count : Number , response : Docs , status : Number }","title":"req.rest structure"},{"location":"extending-hiroki/overview/#beforeend-usage","text":"controller.beforeEnd = function(req,res,next){ doSomething(); next(); //hiroki make the response }","title":"beforeEnd usage"}]}